package com.macv.fastfood.web.controller;

import com.macv.fastfood.persistence.entity.PizzaEntity;
import com.macv.fastfood.service.PizzaService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.sql.SQLException;
import java.util.List;

@RestController
@RequestMapping("/api/pizza")
public class PizzaController {

    private final PizzaService pizzaService;

    @Autowired
    public PizzaController(PizzaService pizzaService) {
        this.pizzaService = pizzaService;
    }

    @GetMapping("/getAll")
    public ResponseEntity<ResponseWrapper<?>> getAll() {
        List<PizzaEntity> data = pizzaService.getAll();
        ResponseWrapper<List<PizzaEntity>> responseWrapper = new ResponseWrapper<>(
                data.size() + " products found",
                data
        );
        return ResponseEntity.ok(responseWrapper);
    }

    @GetMapping("/getById/{id}")
    public ResponseEntity<ResponseWrapper<?>> getById(@PathVariable("id") Integer id) {

        String message;
        HttpStatus httpStatus;
        PizzaEntity data;
        try {
            data = pizzaService.getById(id);
        } catch (Exception e) {
            message = e.getMessage();
            data = null;

        }
        data = pizzaService.getById(id);

        if (data == null) {
            message = "Product not found";
            httpStatus = HttpStatus.NOT_FOUND;
        } else {
            message = "Product found";
            httpStatus = HttpStatus.OK;
        }

        ResponseWrapper<PizzaEntity> responseWrapper = new ResponseWrapper<>(
                message,
                data
        );

        return new ResponseEntity<>(responseWrapper, httpStatus);
        }


    @PostMapping("/new")
    public ResponseEntity<ResponseWrapper<?>> add(@RequestBody PizzaEntity pizzaEntity){

        String message;
        HttpStatus httpStatus;
        PizzaEntity data;

        try {
            if(pizzaEntity.getPizzaId() == null){
                data = pizzaService.add(pizzaEntity);
                message = "Product created successfully";
                httpStatus = HttpStatus.CREATED;
            } else {
                data = null;
                message = "pizzaId is autogenerated, don't sent it";
                httpStatus = HttpStatus.BAD_REQUEST;
            }
        } catch (Exception e){
            message = e.getMessage();
            data = null;
            httpStatus = HttpStatus.BAD_REQUEST;
        }

        ResponseWrapper<PizzaEntity> responseWrapper = new ResponseWrapper<>(
                message,
                data
        );

        return new ResponseEntity<>(responseWrapper, httpStatus);

        }

    @PutMapping("/update")
    public ResponseEntity<ResponseWrapper<?>> update(@RequestBody PizzaEntity pizzaEntity){

        String message;
        HttpStatus httpStatus;
        PizzaEntity data;

        try {
            if(pizzaEntity.getPizzaId() != null && pizzaService.exists(pizzaEntity.getPizzaId())){
                data = pizzaService.add(pizzaEntity);
                message = "Product updated successfully";
                httpStatus = HttpStatus.OK;
            } else {
                data = null;
                httpStatus = HttpStatus.BAD_REQUEST;
                if(pizzaEntity.getPizzaId() == null){
                    message = "pizzaId is required";
                } else if (!pizzaService.exists(pizzaEntity.getPizzaId())){
                    message = "pizzaId not found";
                } else {
                    message = "Uncontrolled error";
                }
            }
        } catch (Exception e){
            message = e.getMessage();
            data = null;
            httpStatus = HttpStatus.BAD_REQUEST;
        }

        ResponseWrapper<PizzaEntity> responseWrapper = new ResponseWrapper<>(
                message,
                data
        );

        return new ResponseEntity<>(responseWrapper, httpStatus);

    }

    @DeleteMapping("/delete/{id}")
    public ResponseEntity<ResponseWrapper<?>> deletePizza(@PathVariable("id") int pizzaId){

        String message;
        HttpStatus httpStatus;
        PizzaEntity data;

        boolean idExists = pizzaService.exists(pizzaId);

        if (!idExists){
            message = "pizzaId: " + pizzaId + " not found";
            httpStatus = HttpStatus.BAD_REQUEST;
            data = null;
        } else {
            message = "Pizza successfully deleted";
            data = pizzaService.getById(pizzaId);
            pizzaService.deleteById(pizzaId);
            httpStatus = HttpStatus.OK;
        }

        ResponseWrapper<PizzaEntity> responseWrapper = new ResponseWrapper<>(
                message,
                data
        );

        return new ResponseEntity<>(responseWrapper, httpStatus);
    }


    @GetMapping("/getByExpression/{expression}")
    public ResponseEntity<ResponseWrapper<?>> getByNameExpression (@PathVariable("expression") String expresion) {
        String message;
        HttpStatus httpStatus;
        List<PizzaEntity> data = pizzaService.searchByNameExpression(expresion);

        if (data == null) {
            message = "0 products with expression: '" + expresion + "' found";
            httpStatus = HttpStatus.BAD_REQUEST;
        } else {
            message = data.size() + " products with expression '" + expresion + "' found";
            httpStatus = HttpStatus.OK;
        }

        ResponseWrapper<List<PizzaEntity>> responseWrapper = new ResponseWrapper<>(
                message,
                data
        );

        return new ResponseEntity<>(responseWrapper, httpStatus);
    }

    @GetMapping("/getOrderedPriceAsc")
    public ResponseEntity<ResponseWrapper<?>> getPizzasOrderedAsc(){
        List<PizzaEntity> data = pizzaService.getOrderedPizzasAsc();
        String message = data.size() + " pizzas found";

        ResponseWrapper<List<PizzaEntity>> responseWrapper = new ResponseWrapper<>(
                message,
                data
        ) ;

        return new ResponseEntity<>(responseWrapper, HttpStatus.OK);
    }

    @GetMapping("/paginated")
    public ResponseEntity<Page<PizzaEntity>> getPaginatedPizzas(@RequestParam(defaultValue = "0") int page,
                                                                @RequestParam(defaultValue = "3") int elementsQuantity){
        return new ResponseEntity<>(pizzaService.getPaginatedPizzas(page, elementsQuantity),HttpStatus.OK);
    }

}